pipeline {

    agent any

    tools { 
        go "go_lang"
        nodejs "node" 
    }

    environment {
        APP_IMAGE_NAME = 'cve-processor'
        DB_IMAGE_NAME = 'cve_db'
        GH_TOKEN = credentials('github-pat')
    }

    stages {
        stage('Initialize') {
            steps {
                cleanWs()

                echo 'Cloning repository...'
                checkout scm
            }
        }
        stage('Validate Commits') {
            steps {
                sh '''
                npm install @commitlint/cli
                npm install @commitlint/config-conventional
                npx commitlint --from HEAD~1 --to HEAD
                '''
            }
        }
        stage('Test') {
            steps {
                echo 'Running tests...'
                sh 'go test ./...'
            }
        }
        stage('Release') {
            when {
                branch 'main'
            }
            steps {
                sh '''
                npm install @semantic-release/changelog
                npm install @semantic-release/git
                npm install @semantic-release/exec
                npx semantic-release
                '''

                script {
                    env.RELEASE_VERSION = readFile('.go-version').trim()
                }
            }
        }
        stage('Build and Publish Images') {
            when {
                branch 'main'
            }
            steps {
                withDockerRegistry([credentialsId: 'dockerHub', url: ""]) {
                    withCredentials([usernamePassword(credentialsId: 'dockerHub', usernameVariable: 'DOCKERHUB_USERNAME', passwordVariable: 'DOCKERHUB_PASSWORD')]) {
                        echo 'Creating a multi-arch builder...'
                        sh "docker buildx create --name multiarch --use"

                        echo 'Building and publishing multi-arch images....'
                        sh """
                        docker buildx build --push --platform linux/amd64,linux/arm64 -f Dockerfile.app --no-cache \
                        -t $DOCKERHUB_USERNAME/$APP_IMAGE_NAME:latest \
                        -t $DOCKERHUB_USERNAME/$APP_IMAGE_NAME:${env.RELEASE_VERSION} \
                        .
                        """
                        sh """
                        docker buildx build --push --platform linux/amd64,linux/arm64 -f Dockerfile.migration --no-cache \
                        -t $DOCKERHUB_USERNAME/$DB_IMAGE_NAME:latest \
                        -t $DOCKERHUB_USERNAME/$DB_IMAGE_NAME:${env.RELEASE_VERSION} \
                        .
                        """
                    }
                }
            }
        }
    }

    post {
        always {
            echo 'Removing docker containers and images...'
            sh 'docker system prune -a -f'
        }
    }
}
