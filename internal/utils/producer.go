package utils

import (
	"cve-processor/config"
	"time"

	"github.com/IBM/sarama"
)

type KafkaProducer struct {
	Producer sarama.SyncProducer
	Topic    string
}

func NewKafkaProducer(config *config.Config) (*KafkaProducer, error) {
	saramaConfig := sarama.NewConfig()
	saramaConfig.Producer.RequiredAcks = sarama.WaitForAll
	saramaConfig.Producer.Retry.Max = 3
	saramaConfig.Producer.Compression = sarama.CompressionSnappy
	saramaConfig.Producer.Partitioner = sarama.NewRandomPartitioner
	saramaConfig.Producer.Return.Successes = true

	saramaConfig.Net.SASL.Enable = true
	saramaConfig.Net.SASL.User = config.KafkaUsername
	saramaConfig.Net.SASL.Password = config.KafkaPassword
	saramaConfig.Net.SASL.Mechanism = sarama.SASLTypePlaintext

	producer, err := sarama.NewSyncProducer(config.KafkaBrokers, saramaConfig)
	if err != nil {
		return nil, err
	}

	return &KafkaProducer{
		Producer: producer,
		Topic:    config.KafkaTopic,
	}, nil
}

func (p *KafkaProducer) Close() error {
	return p.Producer.Close()
}

func (p *KafkaProducer) WriteMessage(value []byte) (int32, int64, error) {
	msg := &sarama.ProducerMessage{
		Topic:     p.Topic,
		Value:     sarama.ByteEncoder(value),
		Timestamp: time.Now(),
	}
	partition, offset, err := p.Producer.SendMessage(msg)
	return partition, offset, err
}
