package cve

import (
	"encoding/json"
	"errors"
	"fmt"
	"log"
	"os"
	"path/filepath"

	"gorm.io/gorm"
)

func ProcessRecords(rootDir string, db *gorm.DB) error {
	err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && filepath.Ext(path) == ".json" {
			baseName := filepath.Base(path)
			if baseName == "delta.json" || baseName == "deltaLog.json" {
				return nil
			}
			err := processRecord(path, db)
			if err != nil {
				log.Printf("Error processing CVE record %s: %v", path, err)
			}
		}
		return nil
	})
	if err != nil {
		return fmt.Errorf("error processing CVE records %s: %v", rootDir, err)
	}
	return nil
}

func processRecord(path string, db *gorm.DB) error {
	jsonData, err := os.ReadFile(path)
	if err != nil {
		return fmt.Errorf("failed to read record file: %w", err)
	}

	var record CVERecordData
	if err := json.Unmarshal([]byte(jsonData), &record); err != nil {
		return fmt.Errorf("failed to parse record: %w", err)
	}

	metadata := record.CVEMetadata
	// fmt.Printf("Processing CVE record: %+v\n", metadata)

	return db.Transaction(func(tx *gorm.DB) error {
		var existingCVERecord CVERecord
		result := tx.Where(&CVERecord{CVEID: metadata.CVEID}).First(&existingCVERecord)
		if result.Error != nil && !errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return fmt.Errorf("failed to check for an existing record: %w", result.Error)
		}

		if result.RowsAffected != 0 && existingCVERecord.DateUpdated == metadata.DateUpdated {
			fmt.Printf("Processing skipped for CVE record %s as dateUpdated has not changed\n", metadata.CVEID)
			return nil
		}

		version := 1
		if result.RowsAffected != 0 {
			existingCVERecord.CurrentVersion = existingCVERecord.CurrentVersion + 1
			existingCVERecord.DateUpdated = metadata.DateUpdated
			if err := tx.Save(&existingCVERecord).Error; err != nil {
				return fmt.Errorf("failed to update an existing record: %w", err)
			}
			version = existingCVERecord.CurrentVersion
		} else {
			newCVERecord := CVERecord{
				CVEID:          metadata.CVEID,
				DateUpdated:    metadata.DateUpdated,
				CurrentVersion: version,
			}
			if err := tx.Create(&newCVERecord).Error; err != nil {
				return fmt.Errorf("failed to create a new record: %w", err)
			}
		}

		cveVersion := CVEVersion{
			CVEID:   metadata.CVEID,
			Version: version,
			CVEData: jsonData,
		}
		if err := tx.Create(&cveVersion).Error; err != nil {
			return fmt.Errorf("failed to create a new version: %w", err)
		}

		return nil
	})
}
