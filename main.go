package main

import (
	"archive/zip"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"log"
	"net/http"
	"os"
	"path/filepath"
	"strings"

	"github.com/joho/godotenv"
	"gorm.io/driver/postgres"
	"gorm.io/gorm"
)

func (CVERecord) TableName() string {
	return "cve.cve_records"
}

type CVERecord struct {
	CVEID          string `gorm:"primaryKey"`
	CurrentVersion int    `gorm:"not null"`
	DateUpdated    string `gorm:"not null"`
}

func (CVEVersion) TableName() string {
	return "cve.cve_versions"
}

type CVEVersion struct {
	CVEID     string    `gorm:"primaryKey"`
	Version   int       `gorm:"primaryKey"`
	CVEData   []byte    `gorm:"type:jsonb; not null"`
	CVERecord CVERecord `gorm:"foreignKey:CVEID;references:CVEID"`
}

type CVERecordData struct {
	CVEMetadata CVEMetadata `json:"cveMetadata"`
}

type CVEMetadata struct {
	CVEID       string `json:"cveId"`
	DateUpdated string `json:"dateUpdated"`
}

func processCVERecords(rootDir string, db *gorm.DB) error {
	err := filepath.Walk(rootDir, func(path string, info os.FileInfo, err error) error {
		if err != nil {
			return err
		}
		if !info.IsDir() && filepath.Ext(path) == ".json" {
			err := processCVERecord(path, db)
			if err != nil {
				log.Printf("Error processing CVE record %s: %v", path, err)
			}
		}
		return nil
	})
	if err != nil {
		return fmt.Errorf("error processing CVE records %s: %v", rootDir, err)
	}
	return nil
}

func processCVERecord(path string, db *gorm.DB) error {
	jsonData, err := os.ReadFile(path)
	if err != nil {
		return fmt.Errorf("failed to read record file: %w", err)
	}

	var record CVERecordData
	if err := json.Unmarshal([]byte(jsonData), &record); err != nil {
		return fmt.Errorf("failed to parse record: %w", err)
	}

	var metadata CVEMetadata = record.CVEMetadata

	var existingCVERecord CVERecord
	result := db.Where(&CVERecord{CVEID: metadata.CVEID}).First(&existingCVERecord)
	if result.Error != nil && !errors.Is(result.Error, gorm.ErrRecordNotFound) {
		return fmt.Errorf("failed to check for an existing record: %w", result.Error)
	}

	// Skip updating cve record as the dateUpdated was not changed
	if result.RowsAffected != 0 && existingCVERecord.DateUpdated == metadata.DateUpdated {
		return nil
	}

	version := 1
	if result.RowsAffected != 0 {
		// Update an existing cve record with the new dateUpdated and currentVersion
		existingCVERecord.CurrentVersion++
		existingCVERecord.DateUpdated = metadata.DateUpdated
		if err := db.Save(&existingCVERecord).Error; err != nil {
			return fmt.Errorf("failed to update an existing record: %w", err)
		}
		version = existingCVERecord.CurrentVersion

	} else {
		// Create a new cve record with default version
		newCVERecord := CVERecord{
			CVEID:          metadata.CVEID,
			DateUpdated:    metadata.DateUpdated,
			CurrentVersion: version,
		}
		if err := db.Create(&newCVERecord).Error; err != nil {
			return fmt.Errorf("failed to create a new record: %w", err)
		}
	}

	// Create a new cve version:
	// - If an existing record was updated
	// - If a new record was created
	cveVersion := CVEVersion{
		CVEID:   metadata.CVEID,
		Version: version,
		CVEData: jsonData,
	}
	if err := db.Create(&cveVersion).Error; err != nil {
		return fmt.Errorf("failed to create a new version: %w", err)
	}

	return nil
}

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("Error loading .env file")
	}

	db := connectToPostgresDB()

	rootDir := "./cve_records"
	url := os.Getenv("CVE_URL")
	err = downloadAndExtractCVERecords(url, rootDir)
	if err != nil {
		log.Fatal(err)
	}

	err = processCVERecords(rootDir, db)
	if err != nil {
		log.Fatal(err)
	}
}

func connectToPostgresDB() *gorm.DB {
	dbHost := os.Getenv("DB_HOST")
	dbPort := os.Getenv("DB_PORT")
	dbName := os.Getenv("DB_NAME")
	dbUsename := os.Getenv("DB_USERNAME")
	dbPassword := os.Getenv("DB_PASSWORD")

	// Construct the database connection string
	dsn := fmt.Sprintf("host=%s port=%s user=%s password=%s dbname=%s", dbHost, dbPort, dbUsename, dbPassword, dbName)

	// Connect to the database
	db, err := gorm.Open(postgres.Open(dsn), &gorm.Config{})
	if err != nil {
		log.Fatal("Error connecting to the database:", err)
	}
	return db
}

func downloadAndExtractCVERecords(url string, dest string) error {
	// Download and extract the CVE records

	// Create the output file
	err := os.MkdirAll(dest, os.ModePerm)
	if err != nil {
		log.Fatal("failed to create output directory:", err)
	}
	outputFile, err := os.CreateTemp("", "cve_records_*.zip")
	if err != nil {
		log.Fatal("failed to create output file:", err)
	}
	defer os.Remove(outputFile.Name())

	resp, err := http.Get(url)
	if err != nil {
		log.Fatal("Error while downloading data from url:", err)
	}
	defer resp.Body.Close()

	_, err = io.Copy(outputFile, resp.Body)
	if err != nil {
		log.Fatal("failed to copy response body to output file:", err)
	}

	err = outputFile.Close()
	if err != nil {
		log.Fatal("failed to close output file:", err)
	}

	// Extract the downloaded file
	err = extractZipFile(outputFile.Name(), dest)
	if err != nil {
		log.Fatal("failed to extract zip file:", err)
	}

	return nil
}

func extractZipFile(zipFile, dest string) error {
	r, err := zip.OpenReader(zipFile)
	if err != nil {
		log.Fatal("failed to open zip file:", err)
	}
	defer r.Close()

	for _, f := range r.File {
		fpath := filepath.Join(dest, f.Name)
		if !strings.HasPrefix(fpath, filepath.Clean(dest)+string(os.PathSeparator)) {
			return fmt.Errorf("illegal file path: %s", fpath)
		}

		if f.FileInfo().IsDir() {
			os.MkdirAll(fpath, os.ModePerm)
			continue
		}

		if err := os.MkdirAll(filepath.Dir(fpath), os.ModePerm); err != nil {
			return err
		}

		outFile, err := os.OpenFile(fpath, os.O_WRONLY|os.O_CREATE|os.O_TRUNC, f.Mode())
		if err != nil {
			return err
		}

		rc, err := f.Open()
		if err != nil {
			return err
		}

		_, err = io.Copy(outFile, rc)
		if err != nil {
			return err
		}

		outFile.Close()
		rc.Close()
	}

	// Remove delta.json and deltaLog.json if they exist
	deltaFiles := []string{"delta.json", "deltaLog.json"}
	for _, file := range deltaFiles {
		fpath := filepath.Join(dest, file)
		if _, err := os.Stat(fpath); err == nil {
			err := os.Remove(fpath)
			if err != nil {
				log.Printf("failed to delete file %s: %v", fpath, err)
			}
		}
	}

	return nil
}
